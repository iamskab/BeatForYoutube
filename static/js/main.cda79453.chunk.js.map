{"version":3,"sources":["components/organisms/Navbar/navbar.js","utils/isDataLoading.js","components/molecules/LoadingSpinner/loadingSpinner.js","state/request/requestNames.js","components/organisms/ApplicationHeader/applicationHeader.js","config.js","components/organisms/YoutubePlayer/subComponents/noVideoBackdrop.js","socket/createSocketClient.js","state/request/actions.js","state/video/actions.js","state/playlist/actions.js","socket/socketMessages.js","state/lobby/actions.js","components/organisms/YoutubePlayer/youtubePlayer.js","components/organisms/Playlist/playlist.js","components/organisms/VideoSuggestions/subComponents/videoSuggestionDescription.js","components/organisms/VideoSuggestions/subComponents/videoPanel.js","components/organisms/VideoSuggestions/videoSuggestions.js","components/molecules/EmptyTabPlaceholder/emptyTabPlaceholder.js","state/searchVideos/actions.js","state/autocomplete/actions.js","components/organisms/SearchBar/searchBar.js","components/environments/ActionTabs/actionTabs.js","components/environments/LobbyFooter/subComponents/footerCurrentSong.js","components/molecules/VideoProgressBar/videoProgressBar.js","utils/convertSecondsToTimeString.js","components/environments/LobbyFooter/subComponents/footerProgressDuration.js","utils/convertTimeString.js","components/environments/LobbyFooter/subComponents/footerVideoControls.js","components/environments/LobbyFooter/subComponents/footerVolumeControls.js","components/environments/LobbyFooter/lobbyFooter.js","components/environments/LobbyMainContent/lobbyMainContent.js","state/user/actions.js","Application.js","utils/createReducer.js","state/autocomplete/reducers.js","state/user/reducers.js","state/lobby/reducers.js","state/searchVideos/reducers.js","state/playlist/reducers.js","state/video/reducers.js","state/request/reducers.js","state/rootReducer.js","store/index.js","serviceWorker.js","index.js"],"names":["NoUsersItem","UserIcon","className","NavigationBar","connect","state","username","user","users","lobby","NavBarDropdownItems","map","index","key","inverse","collapseOnSelect","Header","Brand","Toggle","Collapse","pullRight","title","id","length","isDataLoading","loadingRequests","Object","entries","requestName","isLoading","labelMap","LoadingSpinner","requests","spinnerClassName","ApplicationHeader","config","server","baseUrl","production","development","api","autocomplete","BASE_URL","environment","debug","NoVideoBackDrop","socket","socketIOClient","types","dataLoading","type","dataLoadingSuccess","playNextVideo","videoId","defaultSkip","emit","updateQueue","currentVideoId","setupPlaylistConnection","dispatch","on","data","playlist","videos","video","videoTitle","suggestedUser","videoDuration","getHeadVideoPlaylist","currentPlaylist","updatePlaylist","updateCurrentVideo","addVideoToQueue","addToPlaylist","YoutubePlayerView","props","player","_onReady","bind","_onStateChange","event","target","this","setState","mountPlayer","window","mute","playVideo","playerClassName","opts","height","width","playerVars","autoplay","controls","showinfo","onReady","onStateChange","React","Component","YoutubePlayer","EmptyPlaylistView","Playlist","listItems","VideoSuggestionDescription","channelTitle","VideoPanel","thumbnail","duration","alt","src","bsStyle","onClick","VideoSuggestions","rows","HeadPhoneIcon","EmptyTabPlaceholder","searchVideos","query","path","axios","get","then","response","catch","error","getAutocompleteSuggestions","Promise","resolve","reject","jsonp","Error","suggestion","name","SearchBar","handleInputChange","updateSuggestions","handleTypeaheadChange","selected","searchBarRef","createRef","multiple","options","onSubmit","preventDefault","ref","controlId","Addon","allowNew","labelKey","onSearch","onChange","placeholder","a","updateAutocompleteSuggestions","ActionTabs","defaultActiveKey","eventKey","SongInfo","VideoProgressBar","currentProgress","frameRate","updateProgress","Math","ceil","getCurrentTime","interval","setInterval","previousProps","clearInterval","ProgressBar","now","VideoProgressBarWrapper","Fragment","padTime","time","convertSecondsToTimeString","seconds","minutesRemain","hours","minutes","floor","secondsRemain","FooterProgressDuration","currentTime","updateCurrentTime","convertTimeString","timeString","timeUnits","segments","split","reverse","parseInt","timeObject","forEach","segmentTime","totalTimeInSeconds","convertTimeStringToSeconds","bsSize","volume","updateVolume","setVolume","unMute","maxValue","minValue","value","LobbyFooter","updateUsername","ApplicationView","initLobby","Application","sessionUsername","localStorage","getItem","userForServer","setItem","createReducer","initialState","handlers","action","hasOwnProperty","statuses","status","rootReducer","combineReducers","store","createStore","compose","applyMiddleware","thunkMiddleware","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.cda79453.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Navbar, Nav, NavDropdown, MenuItem } from 'react-bootstrap/lib';\nimport './navbar.css';\n\nconst NoUsersItem = () => (\n    <MenuItem>Currently No Users</MenuItem>\n);\n\nconst UserIcon = () => (\n    <i className=\"user-icon fas fa-user\"></i>\n);\n\nconst NavigationBarView = ({users, username}) => {\n    const NavBarDropdownItems = users.map((user,index) => (\n        <MenuItem key={index}>\n            <UserIcon/>\n            <span className=\"username-list-item\">\n                {user.username}\n                { username === user.username && (' (You)') }\n            </span>\n        </MenuItem>\n    ));\n    \n    return (\n        <Navbar inverse collapseOnSelect>\n            <Navbar.Header>\n                <Navbar.Brand>\n                    Online Jukebox\n                </Navbar.Brand>\n                <Navbar.Toggle />\n            </Navbar.Header>\n            <Navbar.Collapse>\n                <Nav pullRight>\n                    <NavDropdown title=\"Users\" id=\"Users-Nav-Dropdown\">\n                        { users.length > 0 ? (NavBarDropdownItems) : <NoUsersItem/> }\n                    </NavDropdown>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    )\n};\n\nconst mapStateToProps = state => {\n    return {\n        username: state.user.username,\n        users: state.lobby.users\n    }\n};\n\nconst NavigationBar = connect(mapStateToProps)(NavigationBarView);\n\nexport default NavigationBar\n","const isDataLoading = (loadingRequests) => {\n    for (let [requestName, { isLoading }] of Object.entries(loadingRequests)) {\n        if(isLoading) {\n            return {\n                isLoading,\n                requestName\n            }\n        }\n    }\n\n    return { isLoading: false, requestName: '' };\n}\n\nexport default isDataLoading;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { \n    SEARCH_VIDEO,\n    INIT_LOBBY,\n    ADD_VIDEO_TO_PLAYLIST\n} from '../../../state/request/requestNames';\nimport isDataLoading from '../../../utils/isDataLoading';\nimport './loadingSpinner.css';\n\nconst labelMap =  {\n    [INIT_LOBBY]: 'Plugging you in ...',\n    [SEARCH_VIDEO]: 'Searching ...',\n    [ADD_VIDEO_TO_PLAYLIST]: 'Adding video to queue ...'\n};\n\nconst LoadingSpinnerView = ({isLoading, requestName}) => {\n    const spinnerClassName = isLoading ? 'full-page-spinner-container' : 'full-page-spinner-inactive';\n\n    return (\n        <div className={spinnerClassName}>\n            <div className=\"full-page-spinner\"></div>\n            <div className=\"full-page-spinner-label\"> { labelMap[requestName] } </div>\n        </div>\n    )\n};\n\nconst mapStateToProps = ({ requests: { loadingRequests } }) => {\n    const { isLoading, requestName } = isDataLoading(loadingRequests);\n\n    return {\n        isLoading,\n        requestName\n    }\n}\n\nLoadingSpinnerView.propTypes = {\n    isLoading: PropTypes.bool.isRequired,\n    requestName: PropTypes.string.isRequired\n};\n\nconst LoadingSpinner = connect(mapStateToProps)(LoadingSpinnerView);\n\nexport default LoadingSpinner;","export const SEARCH_VIDEO = 'searchVideo';\nexport const INIT_LOBBY = 'initLobby'; \nexport const ADD_VIDEO_TO_PLAYLIST = 'addVideoToPlaylist';\nexport const AUTOCOMPLETE = 'autocomplete';","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport './applicationHeader.css';\n\nconst ApplicationHeaderView = ({username }) => (\n    <header className=\"application-header\">\n        <h3 className=\"welcome-heading\">\n            Welcome, <span className=\"username-field\"> {username} </span>\n        </h3>\n    </header>\n);\n\nApplicationHeaderView.propTypes = {\n    suggestedUser: PropTypes.string\n};\n\nconst mapStateToProps = state => ({\n    username: state.user.username\n});\n\nconst ApplicationHeader = connect(mapStateToProps)(ApplicationHeaderView);\n\nexport default ApplicationHeader","// Config used throughout the application\nconst config = {\n    server: {\n        baseUrl: {\n            production: 'https://tranquil-thicket-13222.herokuapp.com',\n            development: 'http://localhost:5000'\n        } \n    },\n    api: {\n       autocomplete: {\n           BASE_URL: 'https://suggestqueries.google.com/complete/search'\n       }  \n    },\n    environment: {\n        debug: false\n    }\n}\n\nexport default config;","import React from 'react';\nimport './noVideoBackdrop.css';\n\nconst NoVideoBackDrop = () => (\n    <div className=\"no-video-backdrop\">\n        <h4 className=\"no-video-backdrop-title\"> Jukebox Paused </h4>\n    </div>\n);\n\nexport default NoVideoBackDrop;","import socketIOClient from 'socket.io-client';\nimport config from '../config';\n\nconst environment = process.env.NODE_ENV;\n\nconst socket = socketIOClient(config.server.baseUrl[environment]);\n\nexport default socket;","const types = {\n    LOADING_DATA: 'loadingData',\n    DATA_LOADED_SUCCESS: 'loadingSuccess',\n    DATA_LOADED_FAILURE: 'loadingFailure'\n}\n\nconst dataLoading = (requestName) => ({\n    type: types.LOADING_DATA,\n    requestName\n});\n\nconst dataLoadingSuccess = (requestName) => ({\n    type: types.DATA_LOADED_SUCCESS,\n    requestName\n});\n\nconst dataLoadingFailure = (requestName) => ({\n    type: types.DATA_LOADED_FAILURE,\n    requestName\n});\n\nexport {\n    types,\n    dataLoading,\n    dataLoadingSuccess,\n    dataLoadingFailure\n};","const types = {\n    UPDATE_CURRENT_VIDEO: 'updateCurrentVideo'\n};\n\nconst updateCurrentVideo = (video) => ({\n    type: types.UPDATE_CURRENT_VIDEO,\n    video\n});\n\nexport {\n    types,\n    updateCurrentVideo\n};","import socket from '../../socket/createSocketClient';\nimport { \n    FETCH_PLAYLIST,\n    UPDATE_PLAYLIST,\n    PLAY_NEXT_VIDEO,\n    ADD_TO_PLAYLIST\n} from '../../socket/socketMessages';\nimport { dataLoading, dataLoadingSuccess } from '../request/actions';\nimport { INIT_LOBBY, ADD_VIDEO_TO_PLAYLIST } from '../request/requestNames';\nimport { updateCurrentVideo } from '../video/actions';\n\nconst types = {\n    UPDATE_PLAYLIST: 'updatePlaylist'\n};\n\nconst playNextVideo = (videoId, defaultSkip) => {\n    socket.emit(PLAY_NEXT_VIDEO, { videoId, defaultSkip });\n};\n\nconst addToPlaylist = (video) => {\n    socket.emit(ADD_TO_PLAYLIST, video);\n};\n\nconst getHeadVideoPlaylist = (playlist) => {\n    // Catches case when playlist array is empty\n    const nullVideo = {\n        videoTitle: '',\n        videoId: '',\n        suggestedUser: '',\n        videoDuration: ''\n    };\n    const head = playlist.length > 0 ? playlist[0] : nullVideo;\n    return head;\n};\n\n// If defaultSkip is set to false then only the host will play the next video\nconst updateQueue = (currentVideoId, defaultSkip = true) => {\n    playNextVideo(currentVideoId, defaultSkip);\n};\n\n// Redux store actions\nconst updatePlaylist = (playlist) => ({\n    type: types.UPDATE_PLAYLIST,\n    currentPlaylist: playlist\n});\n\n// Initialises socket playlist connection with server\nconst setupPlaylistConnection = () => (dispatch) => {\n    socket.emit(FETCH_PLAYLIST);\n    socket.on(UPDATE_PLAYLIST, (data) => {\n        const playlist = data.videos;\n        const video = getHeadVideoPlaylist(playlist);\n        dispatch(updatePlaylist(playlist));\n        dispatch(updateCurrentVideo(video));\n        dispatch(dataLoadingSuccess(INIT_LOBBY));\n    });\n};\n\nconst addVideoToQueue = (video) => (dispatch) => {\n    dispatch(dataLoading(ADD_VIDEO_TO_PLAYLIST));\n    addToPlaylist(video);\n    dispatch(dataLoadingSuccess(ADD_VIDEO_TO_PLAYLIST));\n};\n\nexport {\n    types,\n    playNextVideo,\n    addToPlaylist,\n    getHeadVideoPlaylist,\n    updateQueue,\n    updatePlaylist,\n    setupPlaylistConnection,\n    addVideoToQueue\n};","export const NEW_USER = 'NEW_USER';\nexport const USER_JOINED = 'USER_JOINED';\nexport const FETCH_PLAYLIST = 'FETCH_PLAYLIST';\nexport const UPDATE_PLAYLIST = 'UPDATE_PLAYLIST';\nexport const FETCH_LOBBY_USERS = 'FETCH_LOBBY_USERS';\nexport const UPDATE_LOBBY_USERS = 'UPDATE_LOBBY_USERS';\nexport const PLAY_NEXT_VIDEO = 'PLAY_NEXT_VIDEO';\nexport const ADD_TO_PLAYLIST = 'ADD_TO_PLAYLIST';","import socket from '../../socket/createSocketClient';\nimport { FETCH_LOBBY_USERS, UPDATE_LOBBY_USERS } from '../../socket/socketMessages'; \n\nconst types = {\n    UPDATE_VOLUME: 'updateVolume',\n    UPDATE_LOBBY_USERS: 'updateLobbyUsers',\n    MOUNT_PLAYER: 'mountPlayer'\n};\n\nconst mountPlayer = (player) => ({\n    type: types.MOUNT_PLAYER,\n    player\n});\n\nconst updateVolume = (volume, player) => (dispatch) => {\n    dispatch({\n        type: types.UPDATE_VOLUME,\n        volume\n    });\n\n    if(volume === 0) {\n        player.mute();\n        return\n    }\n\n    player.setVolume(volume)\n    player.unMute();\n};\n\nconst getLobbyUsers = () => (dispatch) => {\n    socket.emit(FETCH_LOBBY_USERS);\n    socket.on(UPDATE_LOBBY_USERS, (users) => {\n        dispatch({\n            type: types.UPDATE_LOBBY_USERS,\n            users\n        });\n    });\n};\n\n\nexport {\n    types,\n    updateVolume,\n    getLobbyUsers,\n    mountPlayer\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Youtube from 'react-youtube';\nimport { connect } from 'react-redux';\nimport config from '../../../config';\nimport NoVideoBackdrop from './subComponents/noVideoBackdrop';\nimport './youtubePlayer.css';\nimport { updateQueue } from '../../../state/playlist/actions';\nimport { mountPlayer } from '../../../state/lobby/actions';\n\nclass YoutubePlayerView extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            player: null\n        };\n        \n        this._onReady = this._onReady.bind(this);\n        this._onStateChange = this._onStateChange.bind(this);\n    }\n\n    _onReady(event) {\n        // Mount player to component\n        const player = event.target;\n        this.setState({\n            player\n        });\n        this.props.mountPlayer(player);\n        window.player = event.target;\n        player.mute();\n        player.playVideo();\n    }\n\n    _onStateChange(event) {\n        // Finished playing\n        if(event.data === 0) {\n            updateQueue(this.props.currentVideoId, false);\n        }\n    }\n\n    render() {\n        const { currentVideoId } = this.props\n\n        const playerClassName = config.environment.debug ? 'youtube-player-debug' : 'youtube-player';\n        const debugPlayerVars = { autoplay: 1 };\n        const defaultPlayerVars = {\n            autoplay: 1,\n            controls: 0,\n            showinfo: 0\n        };\n\n        const playerVars = config.environment.debug ? debugPlayerVars : defaultPlayerVars;\n\n        const opts = {\n            height: '270',\n            width: '420',\n            playerVars\n        }\n\n        return (\n            <div className=\"youtube-player-wrapper\">\n                { currentVideoId === '' && <NoVideoBackdrop /> }\n                <Youtube\n                    className= {playerClassName}\n                    videoId={currentVideoId}\n                    opts={opts}\n                    onReady={this._onReady}\n                    onStateChange={this._onStateChange}\n                />\n            </div>\n        )\n    }\n}\n\nYoutubePlayerView.propTypes = {\n    currentVideoId: PropTypes.string\n};\n\nconst mapStateToProps = state => ({\n    currentVideoId: state.video.videoId\n});\n\n\nconst mapDispatchToProps = dispatch => ({\n    mountPlayer: (player) => { \n        dispatch(mountPlayer(player));\n    }\n});\n\nconst YoutubePlayer = connect(mapStateToProps, mapDispatchToProps)(YoutubePlayerView);\n\nexport default YoutubePlayer","import React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport './playlist.css';\n\nconst EmptyPlaylistView = () => (\n    <div className=\"empty-video-background\">\n        <i className=\"pause-icon far fa-pause-circle\"></i>\n        <h4 className=\"no-video-text\">Currently no videos on the queue</h4>\n    </div>\n);\n\nconst PlaylistView = ({playlist}) => {\n    const listItems = playlist.map((video,index) => (\n        <Fragment key={index}>\n            <li className=\"playlist-item\" key={index}>\n                <i className=\"music-icon fas fa-music\"></i>{video.videoTitle}\n            </li>\n            <hr className=\"seperator\"/>\n        </Fragment>\n    ))\n\n    return (\n        <div className=\"playlist-section\">\n            <h4 className=\"playlist-header\"> Current Playlist</h4>\n            <hr className=\"seperator\"/>\n            <ul className=\"video-playlist\">\n                { playlist.length > 0 ? (listItems) : <EmptyPlaylistView/> }\n            </ul>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => ({\n    playlist: state.playlist.currentPlaylist,\n});\n\nconst Playlist = connect(mapStateToProps)(PlaylistView);\n\nexport default Playlist;","import React from 'react';\nimport './videoSuggestionDescription.css';\n\nconst VideoSuggestionDescription = ({ videoTitle, channelTitle, videoDuration }) => (\n    <div className=\"suggestion-description\">\n        <h3 className=\"suggestion-title\">\n            {videoTitle}\n        </h3>\n        <div className=\"video-channel\">\n            {channelTitle}\n        </div>\n        <div className=\"video-duration\">\n            {videoDuration}\n        </div>\n    </div>\n);\n\nexport default VideoSuggestionDescription;","import React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-bootstrap/lib';\nimport './videoPanel.css'\nimport VideoSuggestionDescription from './videoSuggestionDescription';\nimport { addVideoToQueue } from '../../../../state/playlist/actions';\n\nconst VideoPanelView = ({ video, addVideoToQueue }) => {\n    const { videoId, thumbnail, title, channelTitle, duration } = video;\n\n    return (\n        <Fragment>\n            <li className=\"suggestion-list-item\" key={videoId}>\n                <div><img alt=\"video-thumbnail\" className=\"suggestion-thumbnail\" src={thumbnail} /></div>\n                <VideoSuggestionDescription\n                    videoTitle={title}\n                    channelTitle={channelTitle}\n                    videoDuration={duration} \n                />\n                <Button\n                    className=\"add-video-button\"\n                    bsStyle=\"primary\"\n                    onClick={ () => addVideoToQueue(video) }\n                    >\n                        <i className=\"fas fa-plus plus-icon\"></i>\n                </Button>\n            </li>\n            <hr className=\"video-suggestion-seperator\"/>\n        </Fragment>\n    );\n};\n\nconst mapDispatchToProps = dispatch => ({\n    addVideoToQueue: (videoId, videoTitle, videoDuration) => { \n        dispatch(addVideoToQueue(videoId, videoTitle, videoDuration))\n    }\n});\n\nconst VideoPanel = connect(null, mapDispatchToProps)(VideoPanelView);\n\nexport default VideoPanel;","import React from 'react';\nimport VideoPanel from './subComponents/videoPanel';\nimport './videoSuggestions.css';\n\nconst VideoSuggestions = ({ videos }) => {\n    const rows = videos.map(video => (\n        <VideoPanel key={video.videoId} video={video} />\n    ))\n\n    return <ul className=\"video-suggestion-list\">{rows}</ul>\n}\n\nexport default VideoSuggestions","import React from 'react';\nimport './emptyTabPlaceholder.css';\n\nconst HeadPhoneIcon = () => (\n    <i className=\"fas fa-headphones-alt empty-tab-placeholder-icon\"></i>\n);\n\nconst EmptyTabPlaceholder = () => (\n    <div className=\"empty-tab-container\">\n        <HeadPhoneIcon />\n        <h4 className=\"empty-tab-prompt-prefix\"> Search for your favorite songs </h4>\n        <h5 className=\"empty-tab-prompt-suffix\"> Let's get this party started! </h5>\n    </div>\n);\n\nexport default EmptyTabPlaceholder;","import axios from 'axios'\nimport config from '../../config'\nimport { SEARCH_VIDEO } from '../request/requestNames';\nimport { \n    dataLoading,\n    dataLoadingSuccess,\n    dataLoadingFailure\n} from '../request/actions';\n\nconst types = {\n    FAILURE: 'searchVideos/FAILURE',\n    SUCCESS: 'searchVideos/SUCCESS'\n};\n\nconst searchVideos = (query) => (dispatch) => {\n    // TODO: use axios instance for this\n    const environment = process.env.NODE_ENV;\n    const path = `${config.server.baseUrl[environment]}/videos?query=${query}`;\n    \n    dispatch(dataLoading(SEARCH_VIDEO));\n\n    axios.get(path)\n        .then((response) => {\n            const videos = response.data;\n            dispatch(dataLoadingSuccess(SEARCH_VIDEO));\n            dispatch({ type: types.SUCCESS, videos });\n        })\n        .catch((error) => {\n            dispatch(dataLoadingFailure(SEARCH_VIDEO));\n            dispatch({ type: types.FAILURE });\n        });\n};\n\nexport {\n    types,\n    searchVideos\n};","import jsonp from 'jsonp';\nimport config from '../../config'\n\nconst types = {\n    FAILURE: 'autocomplete/FAILURE',\n    SUCCESS: 'autocomplete/SUCCESS',\n    LOADING: 'autocomplete/LOADING',\n    LOADING_COMPLETE: 'autocomplete/LOADING_COMPLETE'\n};\n\nconst formatSuggestions = suggestions => suggestions.map((suggestion) => {\n    return { name: suggestion[0] };\n});\n\nconst getAutocompleteSuggestions = (query) => new Promise((resolve, reject) => {\n    const path = `${config.api.autocomplete.BASE_URL}?client=youtube&ds=yt&q=${query}`;\n\n    jsonp(path , (error, data) => {\n        if(error) {\n            reject(new Error('Error in retreiving autocomplete suggestions'));\n        } else {\n            resolve(formatSuggestions(data[1]));\n        }\n    });\n});\n\nconst updateAutocompleteSuggestions = (query) => async(dispatch) => {\n    dispatch({ type: types.LOADING });\n\n    try {\n        const options = await getAutocompleteSuggestions(query);\n        dispatch({ type: types.SUCCESS,  options });\n        dispatch({ type: types.LOADING_COMPLETE });\n    }\n    catch (error) {\n        dispatch({ type: types.FAILURE });\n        dispatch({ type: types.LOADING_COMPLETE });\n    }\n};\n\nexport {\n    types,\n    updateAutocompleteSuggestions\n};","import React from 'react';\nimport { connect } from 'react-redux';\nimport { AsyncTypeahead } from 'react-bootstrap-typeahead';\nimport { InputGroup, FormGroup } from 'react-bootstrap/lib';\nimport VideoSuggestions from '../VideoSuggestions/videoSuggestions';\nimport EmptyTabPlaceholder from '../../molecules/EmptyTabPlaceholder/emptyTabPlaceholder';\nimport { searchVideos } from '../../../state/searchVideos/actions';\nimport { updateAutocompleteSuggestions } from '../../../state/autocomplete/actions';\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\nimport './searchBar.css';\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            query: ''\n        }\n        this.searchBarRef = React.createRef();\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleTypeaheadChange = this.handleTypeaheadChange.bind(this);\n    }\n\n    handleInputChange = (query) => {\n        this.setState({\n            query\n        });\n\n        this.props.updateSuggestions(query);\n    }\n\n    handleTypeaheadChange = (selected) => {\n        if(selected[0]){\n            const query = selected[0].name;\n            this.setState({\n                query\n            });\n            this.props.searchVideos(query);\n        }\n    }\n\n    render() {\n        const { query } = this.state;\n        const { videos, isLoading, multiple, options } = this.props;\n\n        return (\n            <div className=\"video-search-section\">\n                <form \n                    onSubmit={ (event) => {\n                        event.preventDefault();\n                        this.props.searchVideos(query)\n                    }}\n                    ref={this.searchBarRef}\n                >\n                    <FormGroup className=\"search-bar-wrapper\" controlId=\"formBasicText\">\n                        <InputGroup>\n                            <InputGroup.Addon>\n                                <i className=\"fab fa-youtube-square\"></i>\n                            </InputGroup.Addon>\n                            <AsyncTypeahead\n                                id=\"youtube-autocomplete\"\n                                allowNew={false}\n                                isLoading={isLoading}\n                                multiple={multiple}\n                                options={options}\n                                labelKey=\"name\"\n                                onSearch={this.handleInputChange}\n                                onChange={this.handleTypeaheadChange}\n                                placeholder=\"Enter a song name from Youtube ...\"\n                            />\n                        </InputGroup>\n                    </FormGroup>\n                </form>\n                <div className=\"video-suggestions\">\n                    { videos.length > 0\n                        ? <VideoSuggestions videos={videos} />\n                        : <EmptyTabPlaceholder />\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = ({ \n    searchVideos: { videos },\n    autocomplete: { \n        isLoading,\n        multiple,\n        options\n    }\n}) => ({\n    videos,\n    isLoading,\n    multiple,\n    options\n});\n\nconst mapDispatchToProps = dispatch => ({\n    searchVideos: (query) => { \n        dispatch(searchVideos(query));\n    },\n    updateSuggestions: (query) => {\n        dispatch(updateAutocompleteSuggestions(query));\n    }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchBar);","import React from 'react';\nimport Tabs from 'react-bootstrap/lib/Tabs';\nimport Tab from 'react-bootstrap/lib/Tab';\nimport './actionTabs.css';\nimport SearchBar from '../../organisms/SearchBar/searchBar';\nimport EmptyTabPlaceholder from '../../molecules/EmptyTabPlaceholder/emptyTabPlaceholder';\n\nconst ActionTabs = () => (\n    <div className=\"main-action-tabs\">\n        <Tabs defaultActiveKey={1} id=\"action-tabs\">\n            <Tab eventKey={1} title=\"Search\">\n                <SearchBar />\n            </Tab>\n            <Tab eventKey={2} title=\"Users\">\n                <EmptyTabPlaceholder />\n            </Tab>\n            <Tab eventKey={3} title=\"Playlist\">\n                <EmptyTabPlaceholder />\n            </Tab>\n        </Tabs>\n    </div>\n);\n\nexport default ActionTabs;","import React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport './footerCurrentSong.css';\n\nconst SongInfo = ({ videoTitle, channelTitle, suggestedUser }) => (\n    <div className=\"footer-song-info\">\n        <h3 className=\"footer-video-title\">{videoTitle}</h3>\n        { (channelTitle && suggestedUser) &&\n            <Fragment>\n                <h4 className=\"footer-video-channel\">{channelTitle}</h4>\n                <h4 className=\"footer-video-suggested-user\">Added by: {suggestedUser}</h4>\n            </Fragment> }\n    </div>\n);\n\nconst FooterCurrentSong = ({videoTitle, channelTitle, suggestedUser, thumbnail}) => (\n    <section className=\"footer-current-song\">\n        { videoTitle &&  \n            <Fragment>\n                <img alt=\"video-thumbnail\" className=\"footer-video-thumbnail\" src={thumbnail} />\n                <SongInfo \n                    videoTitle={videoTitle}\n                    channelTitle={channelTitle} \n                    suggestedUser={suggestedUser}\n                />\n            </Fragment> }\n    </section>\n);\n\nconst mapStateToProps = (state) => ({\n    videoTitle: state.video.videoTitle,\n    channelTitle: state.video.channelTitle,\n    suggestedUser: state.video.suggestedUser,\n    thumbnail: state.video.thumbnail\n});\n\nexport default connect(mapStateToProps)(FooterCurrentSong);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ProgressBar } from 'react-bootstrap';\nimport './videoProgressBar.css';\n\n// A custom progress bar which indicates progress of the current playing video\nclass VideoProgressBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentProgress: 0\n        };\n        this.frameRate = 500;\n        this.updateProgress = () => {\n            const { videoDuration } = this.props;\n            let currentProgress = 0;\n            \n            if(window.player) {\n                currentProgress = Math.ceil((window.player.getCurrentTime()/videoDuration)*100);\n            }\n           \n            this.setState({\n                currentProgress\n            }); \n        }\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(this.updateProgress, this.frameRate);\n    }\n\n    componentDidUpdate(previousProps) {\n        const { videoDuration } = this.props;\n        if(videoDuration !== previousProps.videoDuration){\n            clearInterval(this.interval);\n            this.interval = setInterval(this.updateProgress, this.frameRate);\n        }\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    render() {\n        return (\n            <ProgressBar now={this.state.currentProgress} />\n        )\n    }\n};\n\nconst VideoProgressBarWrapper = ({videoDuration}) => (\n    <React.Fragment>\n        { \n            videoDuration ?\n            <VideoProgressBar videoDuration={videoDuration} /> :\n            <VideoProgressBar videoDuration={100} />\n        }\n    </React.Fragment>\n);\n\nVideoProgressBar.propTypes = {\n    videoDuration: PropTypes.number.isRequired\n};\n\nVideoProgressBarWrapper.propTypes = {\n    videoDuration: PropTypes.number.isRequired\n};\n\nexport default VideoProgressBarWrapper;","const padTime = time => (time < 10) ? `0${time}` : time;  \n\nconst convertSecondsToTimeString = (seconds) => {\n    if(seconds < 60) {\n        return `00:${padTime(seconds)}`;\n    }\n\n\tconst minutes = Math.floor(seconds/60);\n\tconst secondsRemain = seconds % 60;\n\tlet minutesRemain;\n\tlet hours;\n \n\tif(minutes > 60) {\n\t\thours = Math.floor(minutes/60);\n\t\tminutesRemain = minutes % 60;\n    }\n\n    return hours ?\n        `${hours}:${padTime(minutesRemain)}:${padTime(secondsRemain)}` :\n        `${padTime(minutes)}:${padTime(secondsRemain)}`;\n};\n\nexport default convertSecondsToTimeString;","import React from 'react';\nimport './footerProgressDuration.css';\nimport convertSecondsToTimeString from '../../../../utils/convertSecondsToTimeString';\n\nclass FooterProgressDuration extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentTime: 0\n        };\n        this.frameRate = 1000;\n        this.updateCurrentTime = () => {\n            let currentTime = 0;\n    \n            if(window.player) {\n                currentTime = Math.ceil((window.player.getCurrentTime()));\n            }\n    \n            this.setState({\n                currentTime\n            }); \n        }\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(this.updateCurrentTime, this.frameRate);\n    }\n\n    componentDidUpdate(previousProps) {\n        const { videoDuration } = this.props;\n        if(videoDuration !== previousProps.videoDuration){\n            clearInterval(this.interval);\n            this.interval = setInterval(this.updateCurrentTime, this.frameRate);\n        }\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    render() {\n        const { videoDuration } = this.props;\n\n        return (\n            <div className=\"footer-progress-duration\">\n                <span>{convertSecondsToTimeString(this.state.currentTime)}</span>\n                <span className=\"footer-end-time\">{convertSecondsToTimeString(videoDuration)}</span>\n            </div>\n        )\n    }\n};\n\nexport default FooterProgressDuration;","const segmentTime = (timeString) => {\n    const timeUnits = ['seconds', 'minutes', 'hours'];\n    const segments = timeString.split(':').reverse().map(time => parseInt(time));\n    const timeObject = {}\n\n    if(segments.length > 0) {\n        segments.forEach((duration, index) => {\n            timeObject[timeUnits[index]] = duration\n        });\n    }\n\n    return timeObject;\n}\n\n// Converts a time string like this '02:58' to seconds\nconst convertTimeString = (timeString) => {\n    const { seconds, minutes, hours} = segmentTime(timeString);\n    let totalTimeInSeconds = 0;\n    \n    totalTimeInSeconds += (seconds ? seconds : 0);\n    totalTimeInSeconds += (minutes ? minutes*60 : 0);\n    totalTimeInSeconds += (hours ? hours*60*60 : 0);\n\n    return totalTimeInSeconds;\n}\n\nexport default convertTimeString;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-bootstrap/lib';\nimport VideoProgressBarWrapper from '../../../molecules/VideoProgressBar/videoProgressBar';\nimport FooterProgressDuration from './footerProgressDuration';\nimport './footerVideoControls.css';\nimport convertTimeStringToSeconds from '../../../../utils/convertTimeString';\nimport { updateQueue } from '../../../../state/playlist/actions';\n\nconst FooterVideoControls = ({videoDuration, videoId}) => (\n    <section className=\"footer-controls\">\n        <div className=\"footer-control-buttons\">\n            <Button \n                className=\"favorite-video-button\"\n                bsStyle=\"primary\"\n                bsSize=\"small\"\n            >\n                <i className=\"far fa-heart heart-icon\"></i>\n            </Button>\n\n            <Button \n                className=\"skip-video-button\"\n                bsStyle=\"primary\"\n                bsSize=\"small\"\n                onClick={ () => updateQueue(videoId, true) }\n            >\n                Skip <i className=\"skip-icon fas fa-forward\"></i>\n            </Button>\n        </div>\n        <div className=\"footer-progress-bar\">\n            <FooterProgressDuration  videoDuration={videoDuration}/>\n            <VideoProgressBarWrapper videoDuration={videoDuration} />\n        </div>\n    </section>\n)\n\n\nconst mapStateToProps = state => ({\n    videoId: state.video.videoId,\n    videoDuration: convertTimeStringToSeconds(state.video.videoDuration),\n});\n\nexport default connect(mapStateToProps)(FooterVideoControls);","import React from 'react';\nimport { connect } from 'react-redux';\nimport InputRange from 'react-input-range';\nimport \"react-input-range/lib/css/index.css\";\nimport './footerVolumeControls.css'\nimport { Button } from 'react-bootstrap/lib';\nimport { updateVolume } from '../../../../state/lobby/actions';\n\nconst FooterVolumeControls = ({player, volume, updateVolume}) => (\n    <section className=\"footer-volume-controls\">\n            { volume === 0 ?\n                <Button \n                    className=\"mute-button\"\n                    bsStyle=\"primary\"\n                    bsSize=\"small\"\n                    onClick={ () => { updateVolume(50, player) } }\n                >\n                    <i className=\"fas fa-volume-mute\"></i>\n                </Button> :\n                <Button \n                    className=\"mute-button\"\n                    bsStyle=\"primary\"\n                    bsSize=\"small\"\n                    onClick={ () => { updateVolume(0, player) } }\n                >\n                    <i className=\"fas fa-volume-up\"></i>\n                </Button>\n            }\n            <InputRange\n                maxValue={100}\n                minValue={0}\n                value={volume}\n                onChange={value => updateVolume(value, player)} \n            />\n    </section>\n);\n\n\nconst mapStateToProps = state => ({\n    volume: state.lobby.volume,\n    videoId: state.video.videoId,\n    player: state.lobby.player\n});\n\nconst mapDispatchToProps = dispatch => ({\n    updateVolume: (volume, player) => { \n        dispatch(updateVolume(volume, player));\n    }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FooterVolumeControls);","import React from 'react';\nimport './lobbyFooter.css';\nimport FooterCurrentSong from './subComponents/footerCurrentSong';\nimport FooterVideoControls from './subComponents/footerVideoControls';\nimport FooterVolumeControls from './subComponents/footerVolumeControls';\n\nconst LobbyFooter = () => (\n    <div className=\"lobby-footer-wrapper\">\n        <div className=\"lobby-footer\">\n            <section className=\"lobby-footer-content\">    \n                <FooterCurrentSong />\n                <FooterVideoControls />\n                <FooterVolumeControls />\n            </section>\n        </div>\n    </div>\n);\n\nexport default LobbyFooter;\n","import React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport './lobbyMainContent.css';\nimport ApplicationHeader from '../../organisms/ApplicationHeader/applicationHeader';\nimport YoutubePlayer from '../../organisms/YoutubePlayer/youtubePlayer';\nimport Playlist from '../../organisms/Playlist/playlist';\nimport ActionTabs from '../ActionTabs/actionTabs';\nimport LobbyFooter from '../LobbyFooter/lobbyFooter';\n// import LobbyControls from '../../organisms/LobbyControls/lobbyControls';\n\nconst LobbyMainContent = ({videoId}) => (\n    <Fragment>\n        <ApplicationHeader />\n        <div className=\"upper-section-container\">\n            <div className=\"player-view-container\">\n                <span className=\"current-playlist-section\"><Playlist /></span>\n                <span className=\"youtube-player-container\"><YoutubePlayer /></span>\n            </div>\n            {/* <LobbyControls/> */}\n        </div>\n        <div className=\"lower-section-container\">\n            <ActionTabs />\n        </div>\n        { videoId && <LobbyFooter /> }\n    </Fragment>\n);\n\nconst mapStateToProps = state => ({\n    videoId: state.video.videoId\n});\n\nexport default connect(mapStateToProps)(LobbyMainContent);","import { dataLoading } from \"../request/actions\";\nimport { INIT_LOBBY } from '../request/requestNames';\nimport socket from '../../socket/createSocketClient';\nimport { NEW_USER, USER_JOINED } from '../../socket/socketMessages';\n\nconst types = {\n    UPDATE_USERNAME: 'updateUsername'\n};\n\nconst updateUsername = (username) => ({\n    type: types.UPDATE_USERNAME,\n    username\n});\n\n// Initialises socket user connection with server\nconst setupUserConnection = () => (dispatch) => {\n    // Username is stored per cookie\n    const sessionUsername = localStorage.getItem(\"username\");\n    const userForServer = sessionUsername ? {username: sessionUsername} : {username: ''};\n\n    socket.emit(NEW_USER, userForServer);\n    dispatch(dataLoading(INIT_LOBBY));\n\n    socket.on(USER_JOINED, (user) => {\n        if(!sessionUsername) {\n            dispatch(updateUsername(user.username));\n            localStorage.setItem('username', user.username);\n        } else {\n            dispatch(updateUsername(sessionUsername));\n        }\n    });\n};\n\nexport {\n    types,\n    updateUsername,\n    setupUserConnection\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './Application.css';\nimport NavigationBar from './components/organisms/Navbar/navbar';\nimport LoadingSpinner from './components/molecules/LoadingSpinner/loadingSpinner';\nimport LobbyMainContent from './components/environments/LobbyMainContent/lobbyMainContent';\nimport { setupUserConnection } from './state/user/actions';\nimport { getLobbyUsers } from './state/lobby/actions';\nimport { setupPlaylistConnection } from './state/playlist/actions';\n\nclass ApplicationView extends Component {\n    componentDidMount() {\n        this.props.initLobby();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <LoadingSpinner />\n                <NavigationBar />\n                <LobbyMainContent />\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    initLobby: () => {\n        dispatch(setupUserConnection());\n        dispatch(getLobbyUsers());\n        dispatch(setupPlaylistConnection());\n    }\n});\n\nconst Application = connect(null, mapDispatchToProps)(ApplicationView)\n\nexport default Application;\n","const createReducer = (initialState, handlers)  => \n    (state = initialState, action  = {}) => (\n        handlers.hasOwnProperty(action.type)\n            ? handlers[action.type](state, action)\n            : state\n    );\n\nexport { createReducer };","import { createReducer } from '../../utils/createReducer';\nimport { types } from './actions';\n\nconst initialState = {\n    error: false,\n    isLoading: false,\n    multiple: false,\n    options: []\n};\n\nconst handlers = {\n    [types.FAILURE]: (state) => ({\n        ...state,\n        error: true,\n    }),\n    [types.SUCCESS]: (state, { options }) => ({\n        ...state,\n        error: false,\n        options\n    }),\n    [types.LOADING]: (state) => ({\n        ...state,\n        isLoading: true\n    }),\n    [types.LOADING_COMPLETE]: (state) => ({\n        ...state,\n        isLoading: false\n    })\n};\n\nexport default createReducer(initialState, handlers);","import { createReducer } from '../../utils/createReducer';\nimport { types } from './actions';\n\nconst initialState = {\n    username: ''\n};\n\nconst handlers = {\n    [types.UPDATE_USERNAME]: (state, { username }) => ({\n        ...state,\n        username,\n    })\n};\n\nexport default createReducer(initialState, handlers);","import { createReducer } from '../../utils/createReducer';\nimport { types } from './actions';\n\nconst initialState = {\n    users: [],\n    volume: 0,\n    player: null \n};\n\nconst handlers = {\n    [types.UPDATE_VOLUME]: (state, { volume }) => ({\n        ...state,\n        volume\n    }),\n    [types.UPDATE_LOBBY_USERS]: (state, { users }) => ({\n        ...state,\n        users\n    }),\n    [types.MOUNT_PLAYER]: (state, { player }) => ({\n        ...state,\n        player\n    }),\n};\n\nexport default createReducer(initialState, handlers);","import { createReducer } from '../../utils/createReducer';\nimport { types } from './actions';\n\nconst initialState = {\n    error: false,\n    videos: []\n};\n\nconst handlers = {\n    [types.FAILURE]: (state) => ({\n        ...state,\n        error: true,\n    }),\n    [types.SUCCESS]: (state, { videos }) => ({\n        ...state,\n        error: false,\n        videos\n    })\n};\n\nexport default createReducer(initialState, handlers);\n","import { createReducer } from '../../utils/createReducer';\nimport { types } from './actions';\n\nconst initialState = {\n    currentPlaylist: []\n};\n\nconst handlers = {\n    [types.UPDATE_PLAYLIST]: (state, { currentPlaylist }) => ({\n        ...state,\n        currentPlaylist\n    })\n};\n\nexport default createReducer(initialState, handlers);","import { createReducer } from '../../utils/createReducer';\nimport { types } from './actions';\n\nconst initialState = {\n    suggestedUser: '',\n    videoId: '',\n    videoTitle: '',\n    videoDuration: ''\n};\n\nconst handlers = {\n    [types.UPDATE_CURRENT_VIDEO]: (state, { video }) => ({\n        ...state,\n        ...video\n    })\n};\n\nexport default createReducer(initialState, handlers);","import { createReducer } from '../../utils/createReducer';\nimport { types } from './actions';\n\nconst statuses = {\n    LOADING: 'loading',\n    SUCCESS: 'ok',\n    ERROR: 'error'\n};\n\nconst initialState = {\n    loadingRequests: {}\n};\n\nconst handlers = {\n    [types.LOADING_DATA]: (state, { requestName }) => ({\n        loadingRequests: {\n            ...state.loadingRequests,\n            [requestName]: {\n                status: statuses.LOADING,\n                isLoading: true\n            }\n        }\n    }),\n    [types.DATA_LOADED_SUCCESS]: (state, { requestName }) => ({\n        loadingRequests: {\n            ...state.loadingRequests,\n            [requestName]: {\n                status: statuses.SUCCESS,\n                isLoading: false\n            }\n        }\n    }),\n    [types.DATA_LOADED_FAILURE]: (state, { requestName }) => ({\n        loadingRequests: {\n            ...state.loadingRequests,\n            [requestName]: {\n                status: statuses.ERROR,\n                isLoading: false\n            }\n        }\n    })\n};\n\nexport default createReducer(initialState, handlers);","import { combineReducers } from 'redux';\nimport autocomplete from './autocomplete/reducers';\nimport user from './user/reducers';\nimport lobby from './lobby/reducers';\nimport searchVideos from './searchVideos/reducers';\nimport playlist from './playlist/reducers';\nimport video from './video/reducers';\nimport requests from './request/reducers';\n\nconst rootReducer = combineReducers({\n    autocomplete,\n    user,\n    lobby,\n    playlist,\n    video,\n    searchVideos,\n    requests,\n});\n\nexport default (state, action) => (\n    rootReducer(state, action)  \n);","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { types } from '../state/lobby/actions';\nimport rootReducer from '../state/rootReducer';\n\n// Needed for sanitization of youtube player as payload is too large\nconst sanitizePlayer = (action) => {\n    return action.type === types.MOUNT_PLAYER ?\n    { ...action, player: '<<LONG_BLOB>>' } : action\n};\n\nconst constructLobbyState = (state) => ({\n    ...state,\n    lobby: {\n        users: state.lobby.users,\n        volume: state.lobby.volume,\n        player: '<<YOUTUBE_PLAYER>>'\n    }\n})\n\nconst middlewareEnhancers = () => {\n    const enhancers = [\n        applyMiddleware(thunkMiddleware)\n    ];\n\n    if(process.env.NODE_ENV === 'development' && window.devToolsExtension) {\n        enhancers.push(window.devToolsExtension({\n            sanitizePlayer,\n            stateSanitizer: (state) => state.lobby.player \n                ? constructLobbyState(state) : state\n        }));\n    }\n\n    return enhancers;\n}\n\nconst store = createStore(\n    rootReducer,\n    compose(...middlewareEnhancers())\n);\n\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport Application from './Application';\nimport store from './store/index';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <Application />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}